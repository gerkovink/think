{
  "hash": "a1819f2dc842484ccee878ea5d81e468",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Generative AI in Higher Education\"\nsubtitle: \"Student Think Tank UU @ June 5, 2024\"\nauthors:\n  - name: \"Gerko Vink\"\n    orcid: \"0000-0001-9767-1924\"\neditor: source\n---\n\n\n# Introduction\nHere comes some introduction\n::: callout-note\n## Learning objectives in the tutorials\nThis is a group project. Form groups of 3-4 people. Each group will work together on a mode of collaborative and open development.\n\n- Tutorial 1: Create a group research compendium\n- Tutorial 2: Publish the group compendium by means of open development standards and create a reproducible group website\n- Tutorial 3: Create an individual FAIR R package and commit it to the group page, together with your group projects. \n:::\n\n\n\n::: {.panel-tabset}\n\n## Rstudio\n\n**1. Create an RStudio Project**\n\n- In RStudio, click _File_ > _New Project_ > _Existing Directory_. \n- Browse to your folder `reprodev-exercise_quarto` in which you have saved the workshop materials.\n- Check the _Open in new session_ option.\n- Click _Create Project_. This will create a `reprodev-exercise_quarto.Rproj` file.\n\n**2. Document your project for reproducibility**\n\nYour project already contains pre-made folders, a README file and a License.\nOpen the `README.md` file and fill it with a few relevant details, for example:\n\n- Purpose and contents of the project\n- Your names (Authors)\n- The date of creation\n- Etc.\n\n**3. Create a Quarto document for your manuscript.**\n\n- In RStudio, click _File_ -> _New File_ -> _Quarto Document_\n- Give your document a title, such as `reprodev-exercise_quarto`.\n- Add yourselves as authors. A great way to do this is by including some persistent digital identifier, like an [ORCID](https://orcid.org) iD. See e.g. the following code block\n\n\n::: {.cell}\n\n```{.r .cell-code}\nauthors:\n  - name: \"Gerko Vink\"\n    orcid: \"0000-0001-9767-1924\"\n  - name: \"Your Name\"\n    orcid: \"0000-0000-0000-0000\"\n  - name: \"Your Name\"\n    orcid: \"0000-0000-0000-0000\"\n  - name: \"Your Name\"\n    orcid: \"0000-0000-0000-0000\"\n```\n:::\n\n\n- For now, the default output format (HTML) and engine (knitr) are fine.\n- Uncheck the _Use visual markdown editor_ option.\n- Click _Create_. A new Quarto document opens.\n\n**4. Render the Quarto document to HTML**\n\n- Save the Quarto document in the `docs` folder within the `reprodev-exercise_quarto` folder.  \nGive the file a clear name, without using  spaces. For example, `reprodev-exercise_quarto.qmd` or `my-manuscript.qmd`.\n- Once everything has been saved correctly, click the _Render_ button in the menu bar.\n- The rendered HTML copy of your document will appear in your web browser or alongside the editor in RStudio. You will also see a `yourchosenfilename.html` file appear in the `docs` folder.\n:::\n\n# Add some syntax\nRecreate the following paragraph in your Quarto document using Markdown:\n\n```markdown\nMeet Quarto\n\nQuarto enables you to weave together content and executable code into a finished document. \nTo learn more about Quarto see https://quarto.org.\n\nMeet the boys data \n\nThe boys data from the mice package is a random sample of 10% from the cross-sectional data used to construct the Dutch growth references 1997. Variables gen and phb are ordered factors. reg is a factor.\n\nThe following table shows the first 6 rows of the `boys` data.\n```\n\n## What It Should Look Like\nBelow is an image of the rendered output. Try to recreate it in your Quarto document.\n\n![](tutorial_1_img/quarto.png)\n\n## Links you need\n\n- You can find the link to the development repo of the `mice` package here: [https://github.com/amices/mice](https://github.com/amices/mice)\n- The link to the `mice` logo is: [https://amices.org/mice/logo.png](https://amices.org/mice/logo.png)\n\n## Don't struggle for too long\n::: {.callout-caution collapse=\"true\"}\n## Expand to see the solution\n````\n# Meet `Quarto`\n\n`Quarto` enables you to weave together content and executable code into a finished document. \nTo learn more about Quarto see [https://quarto.org](https://quarto.org).\n\n# Meet the `boys` data \nThe `boys` data from the [`mice`](https://github.com/amices/mice){.pkg} package in [`R`]{.proglang} is a random sample of 10% from the cross-sectional data used to construct the Dutch growth references 1997. Variables `gen` and `phb` are ordered factors. `reg` is a factor.\n\nThe following table shows the first 6 rows of the `boys` data.\n\n:::: {.columns}\n::: {.column width=\"60%\"}\n```{{r}}\nhead(mice::boys)\n```\n:::\n\n::: {.column width=\"40%\"}\n![](https://amices.org/mice/logo.png){fig-align=\"right\" width=60%}\n:::\n::::\n\n````\n::: \n\n# Exercise\n\nThe following panel treats several advanced options that you can use in your `Quarto` document. Follow them from left to right. \n\n::: {.panel-tabset}\n\n## 1. Code sourcing\nYou can side load (aka source) scripts by using code chunks. An `R` code chunk has the form of:\n\n````\n```{{r}}\n#| chunk option 1\n#| chunk option 2\n```\n````\n\nTo side-load a code file use:\n````\n```{{r}}\n#| file: \"your-script.R\"\n#| eval: true \n```\n````\nThe `file` option is the name of the file you want to load. The `eval` option is a boolean that determines if the code should be evaluated.\n\nAlthough `Quarto` unifies code and text, it is still a good idea to separate (parts of) the code from the text. Modular coding makes your documents easier to understand, read, maintain and debug. \n\n1. Add the code file `_data_/read_data.R` to your document to read in the `boys` data.\n\n2. In a new code chunk, ask for the `head(boys)` to verify that your code sourcing is working.\n\n## 2. References\n\nNow let's start with a quick investigation into the `boys` data and its missingness. \n\n1. Add the following syntax with code block to your `Quarto` document:\n\n````\n#| code-overflow: wrap\nNot every value in the `mice::boys` set is observed. This may pose problems with the analysis of the `boys` data. To get an idea about the problem, we can use missing data patterns. created the [`ggmice`](https://github.com/amices/ggmice){.pkg} package to create a [`ggplot2`](https://ggplot2.tidyverse.org){.pkg} [@ggplot2] type plot of the missing values in the `boys` data.\n\n```{{r mdpattern}}\nlibrary(mice)\nlibrary(ggmice)\n\n# visualize ggplot2-like missing data pattern\nmice::boys |> \n  ggmice::plot_pattern()\n```\n````\n\nThe above syntax uses the `Quarto` referencing environment to create a reference for the `ggplot2` package. \n\n2. For the referencing to work, you need to add the `references.bib` file to your project. You can find the file in the docs folder of your project. Add the following line to the YAML front matter of your Quarto document. \n\n```yaml\nbibliography: references.bib\n```\n\nFor more information about bibliographic data sources and `Quarto`, see the [`Quarto Citation reference`](https://quarto.org/docs/authoring/footnotes-and-citations.html).\n\n3. Find the reference for `R`, for package `ggmice` and for package `mice` HINT: You can use the `\\citation()` function in `R`\n\n4. Add the references to text, where the reference for `ggmice` should take the form: Hanne Oberman (2023) and the reference for the others should take the form (Author, Year). \n\n## 3. `renv`\n\nThe `renv` package is a tool for creating reproducible environments in `R`. It is a good practice to use `renv` to manage the packages that you use in your project.\n\nIf you have not yet installed the necessary packages, yet, it may be wise to do so now. See @tip-one for the code to install the necessary packages.\n\nStart `renv`\n\n::: {.cell}\n\n```{.r .cell-code}\nrenv::init()\n```\n:::\n\n\n`renv::init()` adds three new files and directories to your project:\n\n- The project library, _renv/library_, is a library that contains all packages currently used by your project This is the key magic that makes `renv` work: instead of having one library containing the packages used in every project, `renv` gives you a separate library for each project. This gives you the benefits of isolation: different projects can use different versions of packages, and installing, updating, or removing packages in one project doesn’t affect any other project.\n- The lockfile, `renv.lock`, records enough metadata about every package that it can be re-installed on a new machine. We’ll come back to the lockfile shortly when we talk about `renv::snapshot()` and `renv::restore()`.\n- A project `R` profile, `.Rprofile`. This file is run automatically every time you start `R` (in that project), and `renv` uses it to configure your `R` session to use the project library. This ensures that once you turn on `renv` for a project, it stays on, until you deliberately turn it off.\n\nThe next important pair of tools are `renv::snapshot()` and `renv::restore()`:\n\n`snapshot()` updates the lockfile with metadata about the currently-used packages in the project library. This is useful because you can then share the lockfile and other people or other computers can easily reproduce your current environment by running `restore()`, which uses the metadata from the lockfile to install exactly the same version of every package.\n\nThis pair of functions gives you the benefits of reproducibility and portability: you are now tracking exactly which package versions you have installed so you or others can recreate them on other machines.\n\n## 4. in-line code\nThe flexibility of `Quarto` is to add in-line code. This is a great way to add dynamic content to your text that is automatically updated from the data and analyses.\n\n1. Add the following text with in-line code to your document:\n\n\n::: {.cell}\n\n```{.r .cell-code .code-overflow-wrap}\n# Descriptions of the `boys` data\nThe `boys` data contains `r nrow(boys)` rows and `r ncol(boys)` columns. In total there are `r sum(is.na(boys))` missing values in the `boys` data, with the highest number of missing values in the `r names(which.max(apply(mice::boys, 2, function(x) sum(is.na(x)))))` column. \n```\n:::\n\n\nThe last in-line code chunk makes it painfully clear why piping in coding is so essential for the readability of your code. The flexibility about the in-line code is that it is automatically updated from the data and analyses - so as soon as one or the other changes, the output is updated accordingly when the `Quarto` document is rendered. \n:::\n\n# Next tutorial\nYou will need your group's `Quarto` document and the research compendium for the next tutorial. Make sure that you have saved it all. \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}